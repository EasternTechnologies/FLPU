var flag = 2;
window.onload = function() {
		
  var scene = new THREE.Scene();
  var camera = new THREE.PerspectiveCamera( 45, window.innerWidth/window.innerHeight, 0.1, 1000 );

  var renderer = new THREE.WebGLRenderer({ antialias:true });
  renderer.setSize( window.innerWidth, window.innerHeight );
  // renderer.setClearColor(0x21253f);
  renderer.setClearColor(0x242638);
  renderer.shadowMapEnabled = true;
  var el_logo = document.getElementsByClassName("wrapper-logo");
  el_logo[0].appendChild( renderer.domElement );

  camera.position.z = 600;
  camera.position.x = 0;
  camera.position.y = 0;
	
  var light = new THREE.DirectionalLight( 0xffffff, 1 );
  light.castShadow = true;
  scene.add(light);
                // lightPoint start
                // var lightPoint = new THREE.PointLight(0xffffff,1.2);
                // lightPoint.position.set(80,150,450);
                // lightPoint.castShadow = true;
                // lightPoint.receiveShadow = true;
                // lightPoint.shadow.camera.near = 0.1;
                // lightPoint.shadow.camera.far = 100000;
                // scene.add(lightPoint);
                // lightPoint end

                    // var lightSpot = new THREE.SpotLight(0xffffff,1);
                    // lightSpot.position.set(-50,60,400);
                    // lightSpot.castShadow = true;
                    // scene.add(lightSpot);
 
  var ambientLight = new THREE.AmbientLight(0xffffff,1);
  ambientLight.position.set(50,50,300);
  scene.add(ambientLight);
                // plane start
                // var plane_geometry = new THREE.PlaneGeometry(2500,2500,120,120); 
                // var plane = new THREE.Mesh(plane_geometry, new THREE.MeshLambertMaterial({
                //   color:0x2a2d44, 
                //   transparent:true, opacity:0.5}));
                // plane.receiveShadow = true;
                // plane.castShadow = true;
                // scene.add(plane);
                // plane.position.set(0,0,-100);
                // plane end
  var manager = new THREE.LoadingManager();
  var loader  = new THREE.ImageLoader( manager );

  manager.onProgress = function ( item, loaded, total ) {

	};

  var textureBody = new THREE.Texture();
  var textureHead = new THREE.Texture();

  var onProgress = function ( xhr ) {
					if ( xhr.lengthComputable ) {
						var percentComplete = xhr.loaded / xhr.total * 100;
						//console.log( Math.round(percentComplete, 2) + '% downloaded' );
					}
  };

  var onError = function ( xhr ) { };

  /*loader.load( 'model/kub.jpg', function ( image ) {
    textureBody.image = image;
    textureBody.needsUpdate = true;
  });*/

  loader.load( '/themes/logos/img/textura/textura5.jpg', function ( image ) {
    textureHead.image = image;
    textureHead.needsUpdate = true;
  });

  var meshes = [];

  var objLoader = new THREE.OBJLoader();

  objLoader.load( '/obj/logos20.obj', function ( object ) {//ptica.obj
    

   // clearInterval(tick_id);
    //jQuery('h3').text("Загрузка 3D объекта завершена!");
    
    object.traverse( function ( child )
    {
      if ( child instanceof THREE.Mesh )
      {
        meshes.push(child);
      }
    });

    var head = meshes[0];
	
    head.position.x = 0; //232*353*40
    head.position.y = -353/2;
    head.position.z = 0;

    head.rotation.y = 0;
    head.rotation.x = 0;
	  head.rotation.z = 0;
	
    // var mapHeightHead = new THREE.TextureLoader().load( "/themes/logos/img/textura.jpg" );
    // map: textureHead, bumpMap: mapHeightHead, specular: 0xffffff,
    head.material = new THREE.MeshPhongMaterial({ bumpScale: 0.4, shininess: 25, color:0xffffff});
   
    head.castShadow = true;

    scene.add(head);

	controls = new THREE.TrackballControls( camera );

	controls.rotateSpeed = 1;
	controls.zoomSpeed = 1;
	controls.panSpeed = 1;

	
  var step;
  var k = 1;
	 var render = function () {
		
    var canvas = document.querySelector("canvas");
    var hry = head.rotation.y;
    step = 0.002;
    if(hry >= 0.3) {
      k = -1;
    }else if(hry <= -0.3) {
      k = 1;
    }
    head.rotation.y = head.rotation.y + step*k;
    

		
		canvas.onmousemove = function(e) {
			flag = 0;
		};
			  
		  requestAnimationFrame( render );
		  controls.update();
		  renderer.render(scene, camera);
	}
	  render();
	  
  }, onProgress, onError );

  

};
